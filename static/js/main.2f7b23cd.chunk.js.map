{"version":3,"sources":["Portfolio.js","About.js","Homepage.js","App.js","serviceWorker.js","index.js"],"names":["Portfolio","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","inherits","createClass","key","value","_this2","d3","then","setState","react_default","a","createElement","className","map","d","i","reactstrap_es","lg","alt","src","link","location","Component","About","apply","arguments","Homepage","App","HashRouter","Link","to","Route","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f7b23cd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { Card, CardBody, CardText, Col } from 'reactstrap';\n\nexport class Portfolio extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: []\n        }\n    }\n    componentDidMount() {\n        d3.csv('data/portfolio.csv').then ((data) => {\n            this.setState({\n                data: data\n            })\n        })\n    }\n    render() {\n        return <div className=\"container\">Projects\n                 { this.state.data.map((d, i) => {\n                       return <Col lg=\"8\" key={ \"photo\" + i }>\n                                <Card>\n                                  <img alt=\"portfolio_pictures\" className=\"card-img-top\" src={d.link}></img>\n                                <CardBody>\n                                    <CardText>\n                                    { d.location }\n                                  </CardText>\n                                </CardBody>\n                              </Card>\n                              <br/>\n                              </Col>\n                   \n                   }) }\n               </div>\n    }\n}","\nimport React, { Component } from 'react';\n\nexport class About extends Component {\n    render() {\n        return <div className=\"container\">\n        <h3>Hi there, I'm a junior at University of Washington studying Informatics. I love doing photography.</h3>\n        </div>\n    }\n}","import React, { Component } from 'react';\nimport { Jumbotron } from 'reactstrap';\n\nexport class Homepage extends Component {\n    render() {\n        return <Jumbotron>\n            <h1>Charlene Chen</h1>\n        </Jumbotron>\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport { Portfolio } from './Portfolio';\nimport { About } from './About';\nimport { Homepage } from './Homepage';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n          <Link to=\"/\">Home</Link>\n          {' '}\n          <Link to=\"/portfolio\">Photography Portfolio</Link>\n          <Link to=\"/about\">About</Link>\n         <Route exact path=\"/\" component={Homepage} />\n         <Route path=\"/portfolio\" component={Portfolio} />\n         <Route path=\"/about\" component={About} />\n        \n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}